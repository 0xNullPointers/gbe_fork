name: Build emu (Linux)

on:
  workflow_call:
    # needed since it allows this to become a reusable workflow
  workflow_dispatch:
    # allows manual trigger

permissions:
  contents: write

env:
  DEPS_CACHE_KEY: emu-deps-linux
  DEPS_CACHE_DIR: build/deps/linux

  PACKAGE_BASE_DIR: "build/package/linux"
  THIRD_PARTY_BASE_DIR: 'third-party'
  
jobs:
  deps:
    name: Restore or build deps
    if: ${{ !cancelled() }}
    uses: ./.github/workflows/emu-deps-linux.yml

  builds-matrix-linux:
    name: build
    needs: [ deps ]
    runs-on: ubuntu-22.04
    if: ${{ !cancelled() }}
    continue-on-error: true
    
    strategy:
      fail-fast: false
      matrix:
        ## notice how on linux everything is lowercase, `cd GBE_Build`, then: `make help`
        prj: [ 'regular', 'experimental', 'steamclient_experimental', 'steamnetworkingsockets', 'tool_lobby_connect', 'GenerateInterfaces', 'steamclient_regular_linux', ]
        arch: [ 'x64', 'x32', ]
        cfg: [ 'debug', 'release', ]
    
    
    steps:
### clone branch
      - name: Checkout branch
        uses: actions/checkout@v4

### deps
      - name: Restore deps
        id: emu-deps-cache-step
        uses: actions/cache@v4
        with:
          key: ${{ env.DEPS_CACHE_KEY }}
          path: ${{ env.DEPS_CACHE_DIR }}

## mandatory Linux packages, installed via sudo apt install ...
      - name: Install required packages
        shell: bash
        run: sudo chmod 777 build_linux_deps.sh && sudo ./build_linux_deps.sh -verbose -packages_only

## extra helpers/tools, these are not built inside the deps build dir
      - name: Clone third-party build helpers (common/linux)
        uses: actions/checkout@v4
        with:
          ref: 'third-party/common/linux'
          path: "${{env.THIRD_PARTY_BASE_DIR}}/common/linux"

      - name: Clone third-party build helpers (build/linux)
        uses: actions/checkout@v4
        with:
          ref: 'third-party/build/linux'
          path: "${{env.THIRD_PARTY_BASE_DIR}}/build/linux"

### fix folder permissions! not sure why this fails
    # nested subdirs "build/linux/release" cause permission problems
      - name: Give all permissions to repo folder
        shell: bash
        working-directory: ${{ github.workspace }}
        run:  sudo chmod -R 777 "${{ github.workspace }}"

### generate project files
## TODO gen proto action is broken, always returns error = 1
      - name: Generate project files
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          sudo chmod 777 ./third-party/common/linux/premake/premake5
          ./third-party/common/linux/premake/premake5 --file=premake5.lua --os=linux generateproto || echo ;
          ./third-party/common/linux/premake/premake5 --file=premake5.lua --emubuild=${{ github.sha }} --os=linux gmake2
          exit 0

### build target(s)
      - name: Build target(s)
        shell: bash
        working-directory: ${{ github.workspace }}/GBE_Build
        run: |
          echo "dry run..."
          CC=clang CXX=clang++ make -n -j 2 config=${{ matrix.cfg }}_${{ matrix.arch }} ${{ matrix.prj }}
          echo "actual run..."
          CC=clang CXX=clang++ make -j 2 config=${{ matrix.cfg }}_${{ matrix.arch }} ${{ matrix.prj }}

### upload artifact/package to github Actions (for targets)
      - name: Upload build package (for targets)
        uses: actions/upload-artifact@v4
        with:
          name: "emu-linux-${{ matrix.prj }}-${{ matrix.cfg }}-${{ matrix.arch }}-${{ github.sha }}"
          path: "bin/"
          if-no-files-found: 'error'
          compression-level: 9
          retention-days: 1
