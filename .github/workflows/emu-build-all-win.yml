name: Build emu (Windows)

on:
  workflow_call:
    # needed since it allows this to become a reusable workflow
  workflow_dispatch:
    # allows manual trigger

permissions:
  contents: write

env:
  DEPS_CACHE_KEY: emu-deps-win
  DEPS_CACHE_DIR: build/deps/win
  
  THIRD_PARTY_BASE_DIR: 'third-party'

jobs:
  deps:
    name: Restore or build deps
    if: ${{ !cancelled() }}
    uses: ./.github/workflows/emu-deps-win.yml

  builds-matrix-win:
    needs: [ deps ]
    runs-on: windows-2022
    if: ${{ !cancelled() }}
    continue-on-error: true
    
    strategy:
      fail-fast: false
      matrix:
        prj: [ 'GameOverlayRenderer', 'GenerateInterfaces', 'SteamClient', 'SteamEmu', ]
        arch: [ 'x64', 'Win32', ]
        cfg: [ 'Debug', 'Release', 'ExperimentalDebug', 'ExperimentalRelease', ]
        
        exclude:
        - prj: 'GameOverlayRenderer'
          cfg: 'Debug'
        - prj: 'GameOverlayRenderer'
          cfg: 'Release'

        - prj: 'GenerateInterfaces'
          cfg: 'ExperimentalDebug'
        - prj: 'GenerateInterfaces'
          cfg: 'ExperimentalRelease'
    
    steps:
### on Windows Git will auto change line ending to CRLF, not preferable
      - name: Ensure LF line ending
        shell: cmd
        working-directory: ${{ github.workspace }}
        run: |
          git config --local core.autocrlf false
          git config --system core.autocrlf false
          git config --global core.autocrlf false

### ensure we have msbuild
      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2

### clone branch
      - name: Checkout branch
        uses: actions/checkout@v4

### deps
      - name: Restore deps
        id: emu-deps-cache-step
        uses: actions/cache@v4
        with:
          key: ${{ env.DEPS_CACHE_KEY }}
          path: ${{ env.DEPS_CACHE_DIR }}

## extra helpers/tools, these are not built inside the deps build dir
      - name: Clone third-party build helpers (common/win)
        uses: actions/checkout@v4
        with:
          ref: 'third-party/common/win'
          path: "${{env.THIRD_PARTY_BASE_DIR}}/common/win"

      - name: Clone third-party deps (build/win)
        uses: actions/checkout@v4
        with:
          ref: 'third-party/build/win'
          path: "${{env.THIRD_PARTY_BASE_DIR}}/build/win"

### generate project files
## TODO gen proto action is broken, always returns error = 1
      - name: Generate project files
        shell: cmd
        working-directory: ${{ github.workspace }}
        run: |
          third-party\common\win\premake\premake5.exe --file=premake5.lua --os=windows generateproto || echo:
          third-party\common\win\premake\premake5.exe --file=premake5.lua --emubuild=${{ github.sha }} --os=windows vs2022
          exit /b 0

### build target(s)
      - name: Build target(s)
        shell: cmd
        working-directory: ${{ github.workspace }}/GBE_Build
        run: |
          msbuild /nologo /target:${{ matrix.prj }} /m:2 /v:d /p:Configuration=${{ matrix.cfg }},Platform=${{ matrix.arch }} GBE.sln

### upload artifact/package to github Actions (for targets)
      - name: Upload build package (for targets)
        uses: actions/upload-artifact@v4
        with:
          name: "emu-win-${{ matrix.prj }}-${{ matrix.cfg }}-${{ matrix.arch }}-${{ github.sha }}"
          path: "bin/"
          if-no-files-found: 'error'
          compression-level: 9
          retention-days: 1
